id: tutorial_03_using_variables
title: "Remembering Information: Using Variables"
description: "Learn how to store and use information in PowerShell using variables. You'll discover how to save values, work with different types of data, and use variables in commands."
difficulty: beginner
xp_reward: 100
topics:
  - powershell
  - variables
  - data types
  - memory management
steps:
  - id: welcome
    type: text
    title: "Understanding Variables"
    content: |
      # Understanding Variables
      
      Welcome to your third PowerShell tutorial! Today, we'll learn about variables.
      
      In PowerShell, variables are like labeled containers that store information for later use. Think of them like labeled boxes where you can put things and then refer to them by name.
      
      Here's what variables let you do:
      - Store information to use later
      - Name pieces of information so they're easy to understand
      - Update information when things change
      - Use the same information in multiple places
      
      In PowerShell, all variable names start with a $ symbol. Let's dive in!
    xp_reward: 10
  
  - id: create_variable
    type: command
    title: "Creating Your First Variable"
    content: |
      # Creating Your First Variable
      
      Let's create your first variable:
      
      ```powershell
      $name = "PowerShell Learner"
      ```
      
      This creates a variable called $name and stores the text "PowerShell Learner" in it.
      
      Type the command exactly as shown and press Enter.
    command: "$name = \"PowerShell Learner\""
    validation_type: "exact"
    hint: "Type '$name = \"PowerShell Learner\"' including the $ symbol, the quotes, and the exact spacing."
    xp_reward: 10
  
  - id: view_variable
    type: command
    title: "Viewing Variable Contents"
    content: |
      # Viewing Variable Contents
      
      Great job! You've created your first variable.
      
      To see what's inside a variable, you just type the variable name:
      
      ```powershell
      $name
      ```
      
      Try it now to see the value you stored.
    command: "$name"
    validation_type: "exact"
    hint: "Type '$name' (including the $ symbol) and press Enter to see the value stored in the variable."
    xp_reward: 5
  
  - id: change_value
    type: command
    title: "Changing Variable Values"
    content: |
      # Changing Variable Values
      
      Perfect! You've seen that your variable contains the text "PowerShell Learner".
      
      You can change a variable's value any time by assigning a new value to it.
      
      Let's update your $name variable:
      
      ```powershell
      $name = "PowerShell Expert"
      ```
      
      After running this command, the variable will contain the new value.
    command: "$name = \"PowerShell Expert\""
    validation_type: "exact"
    hint: "Type '$name = \"PowerShell Expert\"' to change the value of your variable."
    xp_reward: 10
  
  - id: verify_change
    type: command
    title: "Verifying the New Value"
    content: |
      # Verifying the New Value
      
      Excellent! Let's check that the value was updated.
      
      Type the variable name again to see its current value:
      
      ```powershell
      $name
      ```
    command: "$name"
    validation_type: "exact"
    hint: "Type '$name' to see the updated value."
    xp_reward: 5
  
  - id: number_variable
    type: command
    title: "Storing Numbers"
    content: |
      # Storing Numbers
      
      Great! Variables can store different types of information, not just text.
      
      Let's create a variable to store a number:
      
      ```powershell
      $age = 25
      ```
      
      Notice that numbers don't need quotes around them.
    command: "$age = 25"
    validation_type: "exact"
    hint: "Type '$age = 25' (without quotes around the number)."
    xp_reward: 10
  
  - id: using_in_text
    type: command
    title: "Working with Multiple Variables"
    content: |
      # Working with Multiple Variables
      
      Perfect! Now you have two variables: $name and $age.
      
      Let's use these variables together to create a message:
      
      ```powershell
      "My name is $name and I am $age years old"
      ```
      
      In PowerShell, when you put variable names inside double quotes, they get replaced with their values.
      
      Type the command exactly as shown, with the double quotes.
    command: "\"My name is $name and I am $age years old\""
    validation_type: "exact"
    hint: "Type the entire phrase in double quotes: \"My name is $name and I am $age years old\""
    xp_reward: 15
  
  - id: math_with_variables
    type: command
    title: "Math with Variables"
    content: |
      # Math with Variables
      
      Wonderful! You've seen how variables can be used inside text.
      
      Since $age contains a number, we can do math with it.
      
      Let's calculate the age in months:
      
      ```powershell
      $age * 12
      ```
      
      This will multiply the value in $age by 12.
    command: "$age * 12"
    validation_type: "exact"
    hint: "Type '$age * 12' to multiply the value in $age by 12."
    xp_reward: 10
  
  - id: storing_calculations
    type: command
    title: "Storing Results in Variables"
    content: |
      # Storing Results in Variables
      
      Excellent! We can also store the result of calculations in new variables.
      
      Let's calculate and store the age in days:
      
      ```powershell
      $ageInDays = $age * 365
      ```
      
      This creates a new variable called $ageInDays that contains the result of multiplying $age by 365.
    command: "$ageInDays = $age * 365"
    validation_type: "exact"
    hint: "Type '$ageInDays = $age * 365' to calculate and store the age in days."
    xp_reward: 15
  
  - id: check_calculation
    type: command
    title: "Checking the New Variable"
    content: |
      # Checking the New Variable
      
      Perfect! Now let's check the value of our new variable:
      
      ```powershell
      $ageInDays
      ```
    command: "$ageInDays"
    validation_type: "exact"
    hint: "Type '$ageInDays' to see the stored value."
    xp_reward: 5
  
  - id: command_result
    type: command
    title: "Storing Command Results"
    content: |
      # Storing Command Results
      
      Great! Variables can also store the results of PowerShell commands.
      
      Let's store the current date in a variable:
      
      ```powershell
      $today = Get-Date
      ```
      
      This runs the Get-Date command and stores the result in a variable called $today.
    command: "$today = Get-Date"
    validation_type: "exact"
    hint: "Type '$today = Get-Date' to store the current date in a variable."
    xp_reward: 15
  
  - id: view_date_variable
    type: command
    title: "Viewing the Date Variable"
    content: |
      # Viewing the Date Variable
      
      Good job! Now let's see what's in the $today variable:
      
      ```powershell
      $today
      ```
    command: "$today"
    validation_type: "exact"
    hint: "Type '$today' to display the value of the variable."
    xp_reward: 5
  
  - id: accessing_properties
    type: command
    title: "Using Variable Properties"
    content: |
      # Using Variable Properties
      
      Excellent! You may have noticed that $today contains a lot of information, not just a simple value.
      
      That's because Get-Date returns a DateTime object, which has many properties (like Year, Month, Day, etc.).
      
      We can access these properties using a dot (.) after the variable name:
      
      ```powershell
      $today.Year
      ```
      
      This will show just the year component of the date.
    command: "$today.Year"
    validation_type: "exact"
    hint: "Type '$today.Year' to access just the year property of the date."
    xp_reward: 15
  
  - id: more_properties
    type: command
    title: "More Date Properties"
    content: |
      # More Date Properties
      
      Perfect! Let's try another property:
      
      ```powershell
      $today.DayOfWeek
      ```
      
      This will show the day of the week (like Monday, Tuesday, etc.).
    command: "$today.DayOfWeek"
    validation_type: "exact"
    hint: "Type '$today.DayOfWeek' to see what day of the week it is."
    xp_reward: 10
  
  - id: conclusion
    type: text
    title: "Congratulations!"
    content: |
      # Congratulations!
      
      Amazing work! You've completed the tutorial on PowerShell variables!
      
      Let's review what you've learned:
      
      1. Creating variables with the $ symbol
      2. Storing text values using quotes
      3. Storing numeric values without quotes
      4. Using variables inside text with double quotes
      5. Performing math with variables
      6. Storing command results in variables
      7. Accessing object properties with the dot (.) notation
      
      Variables are a fundamental concept in PowerShell and all programming. They allow you to:
      - Store information for later use
      - Work with different types of data
      - Build more complex commands and scripts
      
      In the next tutorial, we'll learn about PowerShell pipelines, which allow you to connect commands together.
    xp_reward: 10
